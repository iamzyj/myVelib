/**
 * Session records all the information of a ride
 * Because it's the attribute of the user, it doesn't contain the information of any user
 * @author Shuai
 */
package myVelib.core;

import java.util.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;

public class Session implements java.io.Serializable{
	static final long serialVersionUID = 5126497878902754556L;
	private Station startStation;
	private Station endStation;
	private int duration;
	private Time starttime;
	private Time endtime;
	private Bicycle bicycle;
	private double price;
	private boolean finished;
	/**
	 * Construct a session by renting a bike from a station
	 * @param startStation the starting station
	 * @param bicycle the bike that people rent
	 */
	public Session(Station startStation,Bicycle bicycle) {
		this.startStation=startStation;
		this.setStarttime(new Time());
		this.bicycle=bicycle;
		this.setFinished(false);
	}
	/**
	 * empty constructor
	 */
	public Session() {
		this.setStarttime(new Time());
	}
	
	public static void main(String[] args) throws ParseException {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Session s1=new Session();
		s1.setEndtime("2021-05-20 12:34:56");
		System.out.println(s1.duration);
		System.out.println(sdf.format(s1.endtime.time));
		
    }
	/**
	 * get the start station
	 * @return the start station
	 */
	public Station getStartStation() {
		return startStation;
	}
	/**
	 * set the start station
	 * @param startStation
	 */
	public void setStartStation(Station startStation) {
		this.startStation = startStation;
	}
	/**
	 * @return the end station
	 */
	public Station getEndStation() {
		return endStation;
	}
	/**
	 * set the end station
	 * @param endStation
	 */
	public void setEndStation(Station endStation) {
		this.endStation = endStation;
	}
	/**
	 * @return the duration of a ride session
	 */
	public int getDuration() {
		return duration;
	}
	/**
	 * @param duration the duration of a ride session
	 */
	public void setDuration(int duration) {
		this.duration = duration;
	}
	/**
	 * @return bicycle that people rent
	 */
	public Bicycle getBicycle() {
		return bicycle;
	}
	/**
	 * @param bicycle that people rent
	 */
	public void setBicycle(Bicycle bicycle) {
		this.bicycle = bicycle;
	}
	/**
	 * @return starttime of a session
	 */
	public Time getStarttime() {
		return starttime;
	}
	/**
	 * @return the string of a start time
	 */
	public String printStarttime() {
		String format=starttime.format;
		SimpleDateFormat sdf=new SimpleDateFormat(format);
		return sdf.format(starttime.time);
	}
	/**
	 * @param time set the start time
	 */
	public void setStarttime(Time time) {
		this.starttime = time;
	}
	/**
	 * @return endtime
	 */
	public Time getEndtime() {
		return endtime;
	}
	/**
	 * @param str the time generated by computer
	 * @throws ParseException
	 */
	public void setEndtime(String str) throws ParseException {
		Time endtime=new Time(str);
		this.endtime = endtime;
		long s=this.starttime.time.getTime();
		long e=this.endtime.time.getTime();
		this.duration=(int)((e-s)/1000/60);
	}
	/**
	 * calculate the price of a ride session
	 * @param r the type of the card
	 * @param credit the credit of a user
	 */
	public void calculatePrice(RegistrationCard r,double credit) {
//		System.out.println(this.duration);
		if (r==null) {
			if(this.bicycle instanceof Electrical) {
				double temp=Math.ceil((this.duration-credit)/60);
				this.setPrice(2*temp);
			}
			if(this.bicycle instanceof Mechanical) {
				double temp=Math.ceil((this.duration-credit)/60);
				this.setPrice(1*temp);
			}
		}
		if(r instanceof Vlibre) {
			if(this.bicycle instanceof Electrical) {
				double temp=Math.ceil((this.duration-credit)/60-1);
				this.setPrice(temp>0.0?2*temp+1:1.0);
			}
			if(this.bicycle instanceof Mechanical) {
				double temp=Math.ceil((this.duration-credit)/60-1);
				this.setPrice(temp>0.0?1*temp:0.0);
			}
		}
		if(r instanceof Vmax) {
			double temp=Math.ceil((this.duration-credit)/60-1);
			this.setPrice(temp>0.0?1*temp:0.0);
		}
	}
	/**
	 * @return price of a session
	 */
	public double getPrice() {
		return price;
	}
	/**
	 * @param price of a session
	 */
	public void setPrice(double price) {
		this.price = price;
	}
	/**
	 * @return if the session is finished
	 */
	public boolean isFinished() {
		return finished;
	}
	/**
	 * @param finished if the session is finished or not
	 */
	public void setFinished(boolean finished) {
		this.finished = finished;
	}
	
}
